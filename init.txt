######## Custom Options ########
# 1 - Starting Screen
  name = Andre's Bot
  default_manual_training = true
  #combo = MiBe
# 3-f Travel and Exploration
  travel_delay = -1
  explore_delay = -1
  rest_delay = -1
  explore_greedy = true
  explore_stop =
  explore_wall_bias = 10
# 3-g Command Enhancements
  confirm_butcher = never
  auto_butcher = very full
  autofight_throw = true
  rest_wait_both = true
  auto_switch = false
  default_manual_training = true
  autopickup_no_burden = false
  auto_exclude =
  autofight_caught = true
  autofight_wait = true
# 3-h Message and Display Improvements
  hp_warning = 0
  show_more = false
  show_newturn_mark = false
# 3-j Missiles    
  fire_order  = launcher, return
  fire_order += javelin, tomahawk, stone, rock,

# junk to sort later
  show_travel_trail = true
  skill_focus = false
  default_show_all_skills = true
  use_animations =
  force_more_message =
  tile_water_anim = true
  tile_realtime_anim = true




######## Message Options ########
message_colour ^= mute:Unknown command
message_colour += mute:Okay, then

######## Code begins here ########
{
local initialized = false
local did_first_turn = false
local dump_count = you.turns() + 100 - (you.turns() % 100)
local is_resting = false
local LOS = 7
if you.race() == "Barachi" then LOS = 8 end

function initialize()
  crawl.mpr("Hello world!")
end

function first_turn()
  crawl.mpr("First turn")
  -- todo: select weapon skill to prefer/train
end

-- TODO: change this so it keeps a list of all nearby monsters
function look_for_monsters()
  local mon
  for x = -LOS,LOS do
    for y = -LOS,LOS do
      mon = monster.get_monster_at(x, y)
      if mon ~= nil then
        crawl.mpr("just saw a " .. mon:name())
      end
    end
  end
end

-- counts all monsters in view
function countmonsters()
  local count = 0
  for x = -LOS,LOS do
    for y = -LOS,LOS do
      if monster.get_monster_at(x, y) ~= nil then
        count = count + 1
      end
    end
  end
  return count
end

function should_rest()
  local chp, mhp = you.hp()
  if(chp < mhp * 0.9) then 
    return true 
  else
    return false
  end
end

function should_eat()
  return (you.hunger_name() == "hungry" or you.hunger_name() == "very hungry" or you.hunger_name() == "starving" or you.hunger_name() == "fainting")
end

function choose_stat_gain()
  local ap = armour_plan()
  if ap == "heavy" or ap == "large" then
    return "s"
  elseif ap == "light" then
    return "d"
  else
    local str,_ = you.strength()
    local dex,_ = you.dexterity()
    if 3*str < 2*dex then
      return "s"
    else
      return "d"
    end
  end
end

function armour_plan()
  local sp = you.race()
  if sp == "Ogre" or sp == "Troll" then
    return "large"
  elseif sp == "Deep Elf" or sp == "Kobold"
         or sp == "Merfolk" then
    return "dodgy"
  elseif sp:find("Draconian") or sp == "Felid" or sp == "Octopode"
         or sp == "Spriggan" then
    return "light"
  else
    return "heavy"
  end
end

function weapon_choice()
  sp = you.race()
  if sp == "Felid" or sp == "Troll" or sp == "Ghoul" then
    return "Unarmed Combat"
  elseif sp == "Ogre" or sp == "Kobold" then
    return "Maces & Flails"
  elseif sp == "Merfolk" then
    return "Polearms"
  elseif sp == "Spriggan" then
    return "Short Blades"
  else
    return "Axes"
  end
end

-- I/O begins here

function check_messages(str, num)
  local recent_messages = crawl.messages(num)
  if recent_messages:find(str) then
    return true
  else
    return false
  end
end

function press(command)
  crawl.process_keys(command)
end

function magic(command)
  crawl.process_keys(command .. string.char(27) .. string.char(27) .. string.char(27))
end

function pre_turn()
  if not initialized then
    initialize()
    initialized = true
  end
  if not did_first_turn and you.turns() == 0 then
    first_turn()
    did_first_turn = true
  end
  if you.turns() == old_turn_count then
    return
  end
  old_turn_count = you.turns()
  if you.turns() >= dump_count then
    dump_count = dump_count+100
    --uncomment this for periodic dumping
    --crawl.dump_char()
    --crawl.mpr("dumped char")
  end
end

-- This runs exactly once each turn.
function do_turn()
  if countmonsters() == 0 then
    if should_eat() then
      press("o")
      return
    end
    if should_rest() then
      press("s")
      you.turn_is_over() 
      -- the text says that hes resting here but hes not
      return
    end
    if check_messages("Done exploring.", 3) then
      -- descend a floor if you cant autoexplore
      press("G>")
      return
    end
    press("o")
  end

  if(countmonsters() == 1) then
    press(string.char(11))
    return
  end

  if(countmonsters() > 1) then
    -- try to find a small spot to squeeze into then fight away
  end
  -- todo:
  -- either press tab, f or o depending on this variable
  -- also rush to a choke or whatever

  --at min delay, shift skill to a survival skill to prefer/train
end

function ready()
  pre_turn()
  do_turn()
  crawl.delay(1)
end
}

# Reference
# TODO: delete or place in separate folder

##### Lua API - global game state #######################
#The "crawl" module provides functions that describe the game state or
#provide utility methods.
#mpr, mesclr, random2, coinflip, one_chance_in, redraw_screen,
#input_line, c_input_line, getch, kbhit, flush_input, sendkeys,
#playsound, runmacro, bindkey, setopt, msgch_num, msgch_name, regex,
#message_filter, trim, split, game_started, err_trace, args,
#mark_milestone

##### Lua API - character information #######################
#The "you" module provides functions that describe the player character.
#turn_is_over, spells, abilities, name, race, class, god, hp, mp,
#hunger, strength, intelligence, dexterity, xl, exp, res_poison,
#res_fire, res_cold, res_draining, res_shock, res_mutation, res_slowing,
#gourmand, levitating, flying, transform, stop_activity, floor_items,
#where, branch, subdepth, absdepth
